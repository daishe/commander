//               Copyright Marek Dalewski 2017
// Distributed under the Boost Software License, Version 1.0.
//        (See accompanying file LICENSE.md or copy at
//           http://www.boost.org/LICENSE_1_0.txt)

#include <commander/detail__type_traits/is_equality_comparable.hpp>

#include <boost/test/unit_test.hpp>

struct type_a {};
struct type_b {};
struct type_c {};

struct ref_comp_a {};
bool    operator ==(const ref_comp_a&, const     type_a&) { return true; }
bool    operator ==(const     type_a&, const ref_comp_a&) { return true; }
uint8_t operator ==(const ref_comp_a&, const     type_b&) { return 1; }
uint8_t operator ==(const     type_b&, const ref_comp_a&) { return 1; }

struct ref_comp_b {};
bool    operator ==(      ref_comp_b&, const     type_a&) { return true; }
bool    operator ==(const     type_a&,       ref_comp_b&) { return true; }
uint8_t operator ==(      ref_comp_b&, const     type_b&) { return 1; }
uint8_t operator ==(const     type_b&,       ref_comp_b&) { return 1; }

struct ref_comp_c {};
bool    operator ==(const ref_comp_c&,           type_a&) { return true; }
bool    operator ==(          type_a&, const ref_comp_c&) { return true; }
uint8_t operator ==(const ref_comp_c&,           type_b&) { return 1; }
uint8_t operator ==(          type_b&, const ref_comp_c&) { return 1; }

struct ref_comp_d {};
bool    operator ==(ref_comp_d&,     type_a&) { return true; }
bool    operator ==(    type_a&, ref_comp_d&) { return true; }
uint8_t operator ==(ref_comp_d&,     type_b&) { return 1; }
uint8_t operator ==(    type_b&, ref_comp_d&) { return 1; }

struct rref_comp_a {};
bool    operator ==(const rref_comp_a&&, const      type_a& ) { return true; }
bool    operator ==(const      type_a& , const rref_comp_a&&) { return true; }
uint8_t operator ==(const rref_comp_a&&, const      type_b& ) { return 1; }
uint8_t operator ==(const      type_b& , const rref_comp_a&&) { return 1; }

struct rref_comp_b {};
bool    operator ==(      rref_comp_b&&, const      type_a& ) { return true; }
bool    operator ==(const      type_a& ,       rref_comp_b&&) { return true; }
uint8_t operator ==(      rref_comp_b&&, const      type_b& ) { return 1; }
uint8_t operator ==(const      type_b& ,       rref_comp_b&&) { return 1; }

struct rref_comp_c {};
bool    operator ==(const rref_comp_c&&,            type_a& ) { return true; }
bool    operator ==(           type_a& , const rref_comp_c&&) { return true; }
uint8_t operator ==(const rref_comp_c&&,            type_b& ) { return 1; }
uint8_t operator ==(           type_b& , const rref_comp_c&&) { return 1; }

struct rref_comp_d {};
bool    operator ==(rref_comp_d&&,      type_a& ) { return true; }
bool    operator ==(     type_a& , rref_comp_d&&) { return true; }
uint8_t operator ==(rref_comp_d&&,      type_b& ) { return 1; }
uint8_t operator ==(     type_b& , rref_comp_d&&) { return 1; }

BOOST_AUTO_TEST_CASE( is_equality_comparable )
{
    namespace comd = commander::detail;

    {
        static_assert(comd::is_equality_comparable<       bool, bool       >::value);
        static_assert(comd::is_equality_comparable<       char, char       >::value);
        static_assert(comd::is_equality_comparable<     int8_t, int8_t     >::value);
        static_assert(comd::is_equality_comparable<    uint8_t, uint8_t    >::value);
        static_assert(comd::is_equality_comparable<    int16_t, int16_t    >::value);
        static_assert(comd::is_equality_comparable<   uint16_t, uint16_t   >::value);
        static_assert(comd::is_equality_comparable<   char16_t, char16_t   >::value);
        static_assert(comd::is_equality_comparable<    int32_t, int32_t    >::value);
        static_assert(comd::is_equality_comparable<   uint32_t, uint32_t   >::value);
        static_assert(comd::is_equality_comparable<   char32_t, char32_t   >::value);
        static_assert(comd::is_equality_comparable<    wchar_t, wchar_t    >::value);
        static_assert(comd::is_equality_comparable<    int64_t, int64_t    >::value);
        static_assert(comd::is_equality_comparable<   uint64_t, uint64_t   >::value);
        static_assert(comd::is_equality_comparable<      float, float      >::value);
        static_assert(comd::is_equality_comparable<     double, double     >::value);
        static_assert(comd::is_equality_comparable<long double, long double>::value);

        static_assert(comd::is_equality_comparable<       bool, int>::value); static_assert(comd::is_equality_comparable<int, bool       >::value);
        static_assert(comd::is_equality_comparable<       char, int>::value); static_assert(comd::is_equality_comparable<int, char       >::value);
        static_assert(comd::is_equality_comparable<     int8_t, int>::value); static_assert(comd::is_equality_comparable<int, int8_t     >::value);
        static_assert(comd::is_equality_comparable<    uint8_t, int>::value); static_assert(comd::is_equality_comparable<int, uint8_t    >::value);
        static_assert(comd::is_equality_comparable<    int16_t, int>::value); static_assert(comd::is_equality_comparable<int, int16_t    >::value);
        static_assert(comd::is_equality_comparable<   uint16_t, int>::value); static_assert(comd::is_equality_comparable<int, uint16_t   >::value);
        static_assert(comd::is_equality_comparable<   char16_t, int>::value); static_assert(comd::is_equality_comparable<int, char16_t   >::value);
        static_assert(comd::is_equality_comparable<    int32_t, int>::value); static_assert(comd::is_equality_comparable<int, int32_t    >::value);
        static_assert(comd::is_equality_comparable<   uint32_t, int>::value); static_assert(comd::is_equality_comparable<int, uint32_t   >::value);
        static_assert(comd::is_equality_comparable<   char32_t, int>::value); static_assert(comd::is_equality_comparable<int, char32_t   >::value);
        static_assert(comd::is_equality_comparable<    wchar_t, int>::value); static_assert(comd::is_equality_comparable<int, wchar_t    >::value);
        static_assert(comd::is_equality_comparable<    int64_t, int>::value); static_assert(comd::is_equality_comparable<int, int64_t    >::value);
        static_assert(comd::is_equality_comparable<   uint64_t, int>::value); static_assert(comd::is_equality_comparable<int, uint64_t   >::value);
        static_assert(comd::is_equality_comparable<      float, int>::value); static_assert(comd::is_equality_comparable<int, float      >::value);
        static_assert(comd::is_equality_comparable<     double, int>::value); static_assert(comd::is_equality_comparable<int, double     >::value);
        static_assert(comd::is_equality_comparable<long double, int>::value); static_assert(comd::is_equality_comparable<int, long double>::value);
    }

    {
        static_assert( comd::is_equality_comparable<      type_a , ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a ,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_a >::value); static_assert(!comd::is_equality_comparable<ref_comp_a ,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a , const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_a >::value); static_assert(!comd::is_equality_comparable<ref_comp_a , const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a , ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&, const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_a >::value); static_assert(!comd::is_equality_comparable<ref_comp_a ,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a , const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, ref_comp_a >::value); static_assert( comd::is_equality_comparable<ref_comp_a , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_a >::value); static_assert(!comd::is_equality_comparable<ref_comp_a , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&, const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, ref_comp_a&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&, const type_c&>::value);

        static_assert( comd::is_equality_comparable<      type_a , const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a ,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_a >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a ,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a , const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_a >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a , const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a , const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&, const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_a >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a ,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a , const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, const ref_comp_a >::value); static_assert( comd::is_equality_comparable<const ref_comp_a , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_a >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&, const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, const ref_comp_a&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&, const type_c&>::value);

        static_assert( comd::is_equality_comparable<      type_a  , ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  ,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<ref_comp_a  ,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  , const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<ref_comp_a  , const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a  , ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&&,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&, const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&&, const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a&&, ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  ,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<ref_comp_a  ,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  , const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, ref_comp_a  >::value); static_assert( comd::is_equality_comparable<ref_comp_a  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<ref_comp_a  , const type_c&&>::value);
        static_assert( comd::is_equality_comparable<      type_a&&, ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&&,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&, const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<ref_comp_a&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_a&&, const type_c&&>::value);

        static_assert( comd::is_equality_comparable<      type_a  , const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  ,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a  ,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  , const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a  , const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a  , const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&&,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&, const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&&, const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a&&, const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  ,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a  ,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  , const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, const ref_comp_a  >::value); static_assert( comd::is_equality_comparable<const ref_comp_a  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_a  , const type_c&&>::value);
        static_assert( comd::is_equality_comparable<      type_a&&, const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&&,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&, const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, const ref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const ref_comp_a&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_a&&, const type_c&&>::value);
    }

    {
        static_assert(!comd::is_equality_comparable<      type_a , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a , ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&, const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_b >::value); static_assert(!comd::is_equality_comparable<ref_comp_b , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&, const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, ref_comp_b&>::value); static_assert( comd::is_equality_comparable<ref_comp_b&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_b >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<ref_comp_b  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_b&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_b  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_b&&, const type_c&&>::value);
    }

    {
        static_assert(!comd::is_equality_comparable<      type_a , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_c >::value); static_assert( comd::is_equality_comparable<ref_comp_c ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_c >::value); static_assert( comd::is_equality_comparable<ref_comp_c ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_c >::value); static_assert(!comd::is_equality_comparable<ref_comp_c , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_c&>::value); static_assert( comd::is_equality_comparable<ref_comp_c&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_c&>::value); static_assert( comd::is_equality_comparable<ref_comp_c&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, const ref_comp_c >::value); static_assert( comd::is_equality_comparable<const ref_comp_c ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const ref_comp_c >::value); static_assert( comd::is_equality_comparable<const ref_comp_c ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_c >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, const ref_comp_c&>::value); static_assert( comd::is_equality_comparable<const ref_comp_c&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const ref_comp_c&>::value); static_assert( comd::is_equality_comparable<const ref_comp_c&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<ref_comp_c  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_c&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_c  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_c&&, const type_c&&>::value);
    }

    {
        static_assert(!comd::is_equality_comparable<      type_a , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_d >::value); static_assert(!comd::is_equality_comparable<ref_comp_d , const type_c&>::value);
        static_assert( comd::is_equality_comparable<      type_a&, ref_comp_d&>::value); static_assert( comd::is_equality_comparable<ref_comp_d&,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, ref_comp_d&>::value); static_assert( comd::is_equality_comparable<ref_comp_d&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_d >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const ref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<ref_comp_d  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<ref_comp_d&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const ref_comp_d  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const ref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const ref_comp_d&&, const type_c&&>::value);
    }

    {
        static_assert( comd::is_equality_comparable<      type_a , rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a ,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_a >::value); static_assert(!comd::is_equality_comparable<rref_comp_a ,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a , const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_a >::value); static_assert(!comd::is_equality_comparable<rref_comp_a , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_a >::value); static_assert(!comd::is_equality_comparable<rref_comp_a ,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a , const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, rref_comp_a >::value); static_assert( comd::is_equality_comparable<rref_comp_a , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_a >::value); static_assert(!comd::is_equality_comparable<rref_comp_a , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&, const type_c&>::value);

        static_assert( comd::is_equality_comparable<      type_a , const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a ,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_a >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a ,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a , const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_a >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_a >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a ,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a , const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, const rref_comp_a >::value); static_assert( comd::is_equality_comparable<const rref_comp_a , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_a >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_a&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&, const type_c&>::value);

        static_assert( comd::is_equality_comparable<      type_a  , rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  ,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<rref_comp_a  ,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  , const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<rref_comp_a  , const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a  , rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&&,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&, const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&&, const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a&&, rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  ,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<rref_comp_a  ,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  , const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, rref_comp_a  >::value); static_assert( comd::is_equality_comparable<rref_comp_a  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<rref_comp_a  , const type_c&&>::value);
        static_assert( comd::is_equality_comparable<      type_a&&, rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&&,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&, const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<rref_comp_a&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_a&&, const type_c&&>::value);

        static_assert( comd::is_equality_comparable<      type_a  , const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  ,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a  ,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  , const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a  , const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a  , const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&&,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&, const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&&, const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a&&, const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  ,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a  ,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  , const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, const rref_comp_a  >::value); static_assert( comd::is_equality_comparable<const rref_comp_a  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_a  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_a  , const type_c&&>::value);
        static_assert( comd::is_equality_comparable<      type_a&&, const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&&,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&, const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, const rref_comp_a&&>::value); static_assert( comd::is_equality_comparable<const rref_comp_a&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_a&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_a&&, const type_c&&>::value);
    }

    {
        static_assert( comd::is_equality_comparable<      type_a , rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b ,       type_a >::value);
        static_assert( comd::is_equality_comparable<      type_b , rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_b >::value); static_assert(!comd::is_equality_comparable<rref_comp_b ,       type_c >::value);
        static_assert( comd::is_equality_comparable<const type_a , rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b , const type_a >::value);
        static_assert( comd::is_equality_comparable<const type_b , rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_b >::value); static_assert(!comd::is_equality_comparable<rref_comp_b , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_b >::value); static_assert(!comd::is_equality_comparable<rref_comp_b ,       type_c&>::value);
        static_assert( comd::is_equality_comparable<const type_a&, rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b , const type_a&>::value);
        static_assert( comd::is_equality_comparable<const type_b&, rref_comp_b >::value); static_assert( comd::is_equality_comparable<rref_comp_b , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_b >::value); static_assert(!comd::is_equality_comparable<rref_comp_b , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_b >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_b&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&, const type_c&>::value);

        static_assert( comd::is_equality_comparable<      type_a  , rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  ,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<rref_comp_b  ,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  , const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<rref_comp_b  , const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a  , rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&,       type_a  >::value);
        static_assert( comd::is_equality_comparable<      type_b  , rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&&,       type_c  >::value);
        static_assert( comd::is_equality_comparable<const type_a  , rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&, const type_a  >::value);
        static_assert( comd::is_equality_comparable<const type_b  , rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&&, const type_c  >::value);
        static_assert( comd::is_equality_comparable<      type_a&&, rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  ,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<rref_comp_b  ,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  , const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, rref_comp_b  >::value); static_assert( comd::is_equality_comparable<rref_comp_b  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<rref_comp_b  , const type_c&&>::value);
        static_assert( comd::is_equality_comparable<      type_a&&, rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&,       type_a&&>::value);
        static_assert( comd::is_equality_comparable<      type_b&&, rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&&,       type_c&&>::value);
        static_assert( comd::is_equality_comparable<const type_a&&, rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&, const type_a&&>::value);
        static_assert( comd::is_equality_comparable<const type_b&&, rref_comp_b&&>::value); static_assert( comd::is_equality_comparable<rref_comp_b&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_b&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_b  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_b  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_b&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_b&&, const type_c&&>::value);
    }

    {
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, rref_comp_c >::value); static_assert( comd::is_equality_comparable<rref_comp_c ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, rref_comp_c >::value); static_assert( comd::is_equality_comparable<rref_comp_c ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_c >::value); static_assert(!comd::is_equality_comparable<rref_comp_c , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, const rref_comp_c >::value); static_assert( comd::is_equality_comparable<const rref_comp_c ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, const rref_comp_c >::value); static_assert( comd::is_equality_comparable<const rref_comp_c ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_c >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_c&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<rref_comp_c  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_c&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_c  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_c  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_c&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_c&&, const type_c&&>::value);
    }

    {
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_c >::value);
        static_assert( comd::is_equality_comparable<      type_a&, rref_comp_d >::value); static_assert( comd::is_equality_comparable<rref_comp_d ,       type_a&>::value);
        static_assert( comd::is_equality_comparable<      type_b&, rref_comp_d >::value); static_assert( comd::is_equality_comparable<rref_comp_d ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_d >::value); static_assert(!comd::is_equality_comparable<rref_comp_d , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_a >::value);
        static_assert(!comd::is_equality_comparable<      type_b , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_b >::value);
        static_assert(!comd::is_equality_comparable<      type_c , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_c >::value);
        static_assert(!comd::is_equality_comparable<const type_a , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_a >::value);
        static_assert(!comd::is_equality_comparable<const type_b , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_b >::value);
        static_assert(!comd::is_equality_comparable<const type_c , const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_c >::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d ,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_d >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d , const type_c&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_a&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_b&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&,       type_c&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_a&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_b&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&, const rref_comp_d&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&, const type_c&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<rref_comp_d  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<rref_comp_d&&, const type_c&&>::value);

        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_a  >::value);
        static_assert(!comd::is_equality_comparable<      type_b  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_b  >::value);
        static_assert(!comd::is_equality_comparable<      type_c  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_c  >::value);
        static_assert(!comd::is_equality_comparable<const type_a  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_a  >::value);
        static_assert(!comd::is_equality_comparable<const type_b  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_b  >::value);
        static_assert(!comd::is_equality_comparable<const type_c  , const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_c  >::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  ,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_d  >::value); static_assert(!comd::is_equality_comparable<const rref_comp_d  , const type_c&&>::value);
        static_assert(!comd::is_equality_comparable<      type_a&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_a&&>::value);
        static_assert(!comd::is_equality_comparable<      type_b&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_b&&>::value);
        static_assert(!comd::is_equality_comparable<      type_c&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&,       type_c&&>::value);
        static_assert(!comd::is_equality_comparable<const type_a&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_a&&>::value);
        static_assert(!comd::is_equality_comparable<const type_b&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_b&&>::value);
        static_assert(!comd::is_equality_comparable<const type_c&&, const rref_comp_d&&>::value); static_assert(!comd::is_equality_comparable<const rref_comp_d&&, const type_c&&>::value);
    }
}

BOOST_AUTO_TEST_CASE( is_equality_comparable_v )
{
    namespace comd = commander::detail;

    {
        static_assert(comd::is_equality_comparable_v<       bool, bool       >);
        static_assert(comd::is_equality_comparable_v<       char, char       >);
        static_assert(comd::is_equality_comparable_v<     int8_t, int8_t     >);
        static_assert(comd::is_equality_comparable_v<    uint8_t, uint8_t    >);
        static_assert(comd::is_equality_comparable_v<    int16_t, int16_t    >);
        static_assert(comd::is_equality_comparable_v<   uint16_t, uint16_t   >);
        static_assert(comd::is_equality_comparable_v<   char16_t, char16_t   >);
        static_assert(comd::is_equality_comparable_v<    int32_t, int32_t    >);
        static_assert(comd::is_equality_comparable_v<   uint32_t, uint32_t   >);
        static_assert(comd::is_equality_comparable_v<   char32_t, char32_t   >);
        static_assert(comd::is_equality_comparable_v<    wchar_t, wchar_t    >);
        static_assert(comd::is_equality_comparable_v<    int64_t, int64_t    >);
        static_assert(comd::is_equality_comparable_v<   uint64_t, uint64_t   >);
        static_assert(comd::is_equality_comparable_v<      float, float      >);
        static_assert(comd::is_equality_comparable_v<     double, double     >);
        static_assert(comd::is_equality_comparable_v<long double, long double>);

        static_assert(comd::is_equality_comparable_v<       bool, int>); static_assert(comd::is_equality_comparable_v<int, bool       >);
        static_assert(comd::is_equality_comparable_v<       char, int>); static_assert(comd::is_equality_comparable_v<int, char       >);
        static_assert(comd::is_equality_comparable_v<     int8_t, int>); static_assert(comd::is_equality_comparable_v<int, int8_t     >);
        static_assert(comd::is_equality_comparable_v<    uint8_t, int>); static_assert(comd::is_equality_comparable_v<int, uint8_t    >);
        static_assert(comd::is_equality_comparable_v<    int16_t, int>); static_assert(comd::is_equality_comparable_v<int, int16_t    >);
        static_assert(comd::is_equality_comparable_v<   uint16_t, int>); static_assert(comd::is_equality_comparable_v<int, uint16_t   >);
        static_assert(comd::is_equality_comparable_v<   char16_t, int>); static_assert(comd::is_equality_comparable_v<int, char16_t   >);
        static_assert(comd::is_equality_comparable_v<    int32_t, int>); static_assert(comd::is_equality_comparable_v<int, int32_t    >);
        static_assert(comd::is_equality_comparable_v<   uint32_t, int>); static_assert(comd::is_equality_comparable_v<int, uint32_t   >);
        static_assert(comd::is_equality_comparable_v<   char32_t, int>); static_assert(comd::is_equality_comparable_v<int, char32_t   >);
        static_assert(comd::is_equality_comparable_v<    wchar_t, int>); static_assert(comd::is_equality_comparable_v<int, wchar_t    >);
        static_assert(comd::is_equality_comparable_v<    int64_t, int>); static_assert(comd::is_equality_comparable_v<int, int64_t    >);
        static_assert(comd::is_equality_comparable_v<   uint64_t, int>); static_assert(comd::is_equality_comparable_v<int, uint64_t   >);
        static_assert(comd::is_equality_comparable_v<      float, int>); static_assert(comd::is_equality_comparable_v<int, float      >);
        static_assert(comd::is_equality_comparable_v<     double, int>); static_assert(comd::is_equality_comparable_v<int, double     >);
        static_assert(comd::is_equality_comparable_v<long double, int>); static_assert(comd::is_equality_comparable_v<int, long double>);
    }

    {
        static_assert( comd::is_equality_comparable_v<      type_a , ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a ,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_a >); static_assert(!comd::is_equality_comparable_v<ref_comp_a ,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a , const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_a >); static_assert(!comd::is_equality_comparable_v<ref_comp_a , const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a , ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&, const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_a >); static_assert(!comd::is_equality_comparable_v<ref_comp_a ,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a , const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, ref_comp_a >); static_assert( comd::is_equality_comparable_v<ref_comp_a , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_a >); static_assert(!comd::is_equality_comparable_v<ref_comp_a , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&, const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, ref_comp_a&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&, const type_c&>);

        static_assert( comd::is_equality_comparable_v<      type_a , const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a ,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_a >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a ,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a , const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_a >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a , const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a , const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&, const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_a >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a ,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a , const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, const ref_comp_a >); static_assert( comd::is_equality_comparable_v<const ref_comp_a , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_a >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&, const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, const ref_comp_a&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&, const type_c&>);

        static_assert( comd::is_equality_comparable_v<      type_a  , ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  ,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<ref_comp_a  ,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  , const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<ref_comp_a  , const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a  , ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&&,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&, const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&&, const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a&&, ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  ,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<ref_comp_a  ,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  , const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, ref_comp_a  >); static_assert( comd::is_equality_comparable_v<ref_comp_a  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<ref_comp_a  , const type_c&&>);
        static_assert( comd::is_equality_comparable_v<      type_a&&, ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&&,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&, const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<ref_comp_a&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_a&&, const type_c&&>);

        static_assert( comd::is_equality_comparable_v<      type_a  , const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  ,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a  ,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  , const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a  , const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a  , const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&&,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&, const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&&, const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a&&, const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  ,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a  ,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  , const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, const ref_comp_a  >); static_assert( comd::is_equality_comparable_v<const ref_comp_a  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_a  , const type_c&&>);
        static_assert( comd::is_equality_comparable_v<      type_a&&, const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&&,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&, const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, const ref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const ref_comp_a&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_a&&, const type_c&&>);
    }

    {
        static_assert(!comd::is_equality_comparable_v<      type_a , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a , ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&, const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_b >); static_assert(!comd::is_equality_comparable_v<ref_comp_b , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&, const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, ref_comp_b&>); static_assert( comd::is_equality_comparable_v<ref_comp_b&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_b >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<ref_comp_b  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_b&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_b  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_b&&, const type_c&&>);
    }

    {
        static_assert(!comd::is_equality_comparable_v<      type_a , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_c >); static_assert( comd::is_equality_comparable_v<ref_comp_c ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_c >); static_assert( comd::is_equality_comparable_v<ref_comp_c ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_c >); static_assert(!comd::is_equality_comparable_v<ref_comp_c , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_c&>); static_assert( comd::is_equality_comparable_v<ref_comp_c&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_c&>); static_assert( comd::is_equality_comparable_v<ref_comp_c&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, const ref_comp_c >); static_assert( comd::is_equality_comparable_v<const ref_comp_c ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const ref_comp_c >); static_assert( comd::is_equality_comparable_v<const ref_comp_c ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_c >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, const ref_comp_c&>); static_assert( comd::is_equality_comparable_v<const ref_comp_c&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const ref_comp_c&>); static_assert( comd::is_equality_comparable_v<const ref_comp_c&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<ref_comp_c  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_c&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_c  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_c&&, const type_c&&>);
    }

    {
        static_assert(!comd::is_equality_comparable_v<      type_a , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_d >); static_assert(!comd::is_equality_comparable_v<ref_comp_d , const type_c&>);
        static_assert( comd::is_equality_comparable_v<      type_a&, ref_comp_d&>); static_assert( comd::is_equality_comparable_v<ref_comp_d&,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, ref_comp_d&>); static_assert( comd::is_equality_comparable_v<ref_comp_d&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_d >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const ref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<ref_comp_d  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<ref_comp_d&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const ref_comp_d  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const ref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const ref_comp_d&&, const type_c&&>);
    }

    {
        static_assert( comd::is_equality_comparable_v<      type_a , rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a ,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_a >); static_assert(!comd::is_equality_comparable_v<rref_comp_a ,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a , const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_a >); static_assert(!comd::is_equality_comparable_v<rref_comp_a , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_a >); static_assert(!comd::is_equality_comparable_v<rref_comp_a ,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a , const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, rref_comp_a >); static_assert( comd::is_equality_comparable_v<rref_comp_a , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_a >); static_assert(!comd::is_equality_comparable_v<rref_comp_a , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&, const type_c&>);

        static_assert( comd::is_equality_comparable_v<      type_a , const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a ,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_a >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a ,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a , const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_a >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_a >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a ,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a , const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, const rref_comp_a >); static_assert( comd::is_equality_comparable_v<const rref_comp_a , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_a >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_a&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&, const type_c&>);

        static_assert( comd::is_equality_comparable_v<      type_a  , rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  ,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<rref_comp_a  ,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  , const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<rref_comp_a  , const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a  , rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&&,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&, const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&&, const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a&&, rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  ,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<rref_comp_a  ,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  , const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, rref_comp_a  >); static_assert( comd::is_equality_comparable_v<rref_comp_a  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<rref_comp_a  , const type_c&&>);
        static_assert( comd::is_equality_comparable_v<      type_a&&, rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&&,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&, const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<rref_comp_a&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_a&&, const type_c&&>);

        static_assert( comd::is_equality_comparable_v<      type_a  , const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  ,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a  ,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  , const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a  , const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a  , const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&&,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&, const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&&, const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a&&, const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  ,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a  ,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  , const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, const rref_comp_a  >); static_assert( comd::is_equality_comparable_v<const rref_comp_a  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_a  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_a  , const type_c&&>);
        static_assert( comd::is_equality_comparable_v<      type_a&&, const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&&,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&, const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, const rref_comp_a&&>); static_assert( comd::is_equality_comparable_v<const rref_comp_a&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_a&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_a&&, const type_c&&>);
    }

    {
        static_assert( comd::is_equality_comparable_v<      type_a , rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b ,       type_a >);
        static_assert( comd::is_equality_comparable_v<      type_b , rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_b >); static_assert(!comd::is_equality_comparable_v<rref_comp_b ,       type_c >);
        static_assert( comd::is_equality_comparable_v<const type_a , rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b , const type_a >);
        static_assert( comd::is_equality_comparable_v<const type_b , rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_b >); static_assert(!comd::is_equality_comparable_v<rref_comp_b , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_b >); static_assert(!comd::is_equality_comparable_v<rref_comp_b ,       type_c&>);
        static_assert( comd::is_equality_comparable_v<const type_a&, rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b , const type_a&>);
        static_assert( comd::is_equality_comparable_v<const type_b&, rref_comp_b >); static_assert( comd::is_equality_comparable_v<rref_comp_b , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_b >); static_assert(!comd::is_equality_comparable_v<rref_comp_b , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_b >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_b&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&, const type_c&>);

        static_assert( comd::is_equality_comparable_v<      type_a  , rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  ,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<rref_comp_b  ,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  , const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<rref_comp_b  , const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a  , rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&,       type_a  >);
        static_assert( comd::is_equality_comparable_v<      type_b  , rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&&,       type_c  >);
        static_assert( comd::is_equality_comparable_v<const type_a  , rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&, const type_a  >);
        static_assert( comd::is_equality_comparable_v<const type_b  , rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&&, const type_c  >);
        static_assert( comd::is_equality_comparable_v<      type_a&&, rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  ,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<rref_comp_b  ,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  , const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, rref_comp_b  >); static_assert( comd::is_equality_comparable_v<rref_comp_b  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<rref_comp_b  , const type_c&&>);
        static_assert( comd::is_equality_comparable_v<      type_a&&, rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&,       type_a&&>);
        static_assert( comd::is_equality_comparable_v<      type_b&&, rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&&,       type_c&&>);
        static_assert( comd::is_equality_comparable_v<const type_a&&, rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&, const type_a&&>);
        static_assert( comd::is_equality_comparable_v<const type_b&&, rref_comp_b&&>); static_assert( comd::is_equality_comparable_v<rref_comp_b&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_b&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_b  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_b  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_b&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_b&&, const type_c&&>);
    }

    {
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, rref_comp_c >); static_assert( comd::is_equality_comparable_v<rref_comp_c ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, rref_comp_c >); static_assert( comd::is_equality_comparable_v<rref_comp_c ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_c >); static_assert(!comd::is_equality_comparable_v<rref_comp_c , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, const rref_comp_c >); static_assert( comd::is_equality_comparable_v<const rref_comp_c ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, const rref_comp_c >); static_assert( comd::is_equality_comparable_v<const rref_comp_c ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_c >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_c&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<rref_comp_c  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_c&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_c  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_c  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_c&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_c&&, const type_c&&>);
    }

    {
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_c >);
        static_assert( comd::is_equality_comparable_v<      type_a&, rref_comp_d >); static_assert( comd::is_equality_comparable_v<rref_comp_d ,       type_a&>);
        static_assert( comd::is_equality_comparable_v<      type_b&, rref_comp_d >); static_assert( comd::is_equality_comparable_v<rref_comp_d ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_d >); static_assert(!comd::is_equality_comparable_v<rref_comp_d , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_a >);
        static_assert(!comd::is_equality_comparable_v<      type_b , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_b >);
        static_assert(!comd::is_equality_comparable_v<      type_c , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_c >);
        static_assert(!comd::is_equality_comparable_v<const type_a , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_a >);
        static_assert(!comd::is_equality_comparable_v<const type_b , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_b >);
        static_assert(!comd::is_equality_comparable_v<const type_c , const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_c >);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d ,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_d >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d , const type_c&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_a&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_b&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&,       type_c&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_a&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_b&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&, const rref_comp_d&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&, const type_c&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<rref_comp_d  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<rref_comp_d&&, const type_c&&>);

        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_a  >);
        static_assert(!comd::is_equality_comparable_v<      type_b  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_b  >);
        static_assert(!comd::is_equality_comparable_v<      type_c  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_c  >);
        static_assert(!comd::is_equality_comparable_v<const type_a  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_a  >);
        static_assert(!comd::is_equality_comparable_v<const type_b  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_b  >);
        static_assert(!comd::is_equality_comparable_v<const type_c  , const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_c  >);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  ,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_d  >); static_assert(!comd::is_equality_comparable_v<const rref_comp_d  , const type_c&&>);
        static_assert(!comd::is_equality_comparable_v<      type_a&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_a&&>);
        static_assert(!comd::is_equality_comparable_v<      type_b&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_b&&>);
        static_assert(!comd::is_equality_comparable_v<      type_c&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&,       type_c&&>);
        static_assert(!comd::is_equality_comparable_v<const type_a&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_a&&>);
        static_assert(!comd::is_equality_comparable_v<const type_b&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_b&&>);
        static_assert(!comd::is_equality_comparable_v<const type_c&&, const rref_comp_d&&>); static_assert(!comd::is_equality_comparable_v<const rref_comp_d&&, const type_c&&>);
    }
}
