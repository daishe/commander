//               Copyright Marek Dalewski 2017
// Distributed under the Boost Software License, Version 1.0.
//        (See accompanying file LICENSE.md or copy at
//           http://www.boost.org/LICENSE_1_0.txt)

#include <commander/detail__type_traits/decay.hpp>

#include <boost/test/unit_test.hpp>

#include <type_traits>

BOOST_AUTO_TEST_CASE( decay )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay<               t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay<      volatile t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay<const          t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay<const volatile t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay<               t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay<      volatile t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay<const          t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay<const volatile t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay<               t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay<      volatile t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay<const          t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay<const volatile t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay<               t*   >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile t*   >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          t*   >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile t*   >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               t* & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile t* & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          t* & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile t* & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               t* &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile t* &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          t* &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile t* &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               u    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile u    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          u    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile u    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               u  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile u  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          u  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile u  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               u  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile u  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          u  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile u  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               u*   >::type,                u*>);
    static_assert(std::is_same_v<comd::decay<      volatile u*   >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay<const          u*   >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay<const volatile u*   >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay<               u* & >::type,                u*>);
    static_assert(std::is_same_v<comd::decay<      volatile u* & >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay<const          u* & >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay<const volatile u* & >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay<               u* &&>::type,                u*>);
    static_assert(std::is_same_v<comd::decay<      volatile u* &&>::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay<const          u* &&>::type, const          u*>);
    static_assert(std::is_same_v<comd::decay<const volatile u* &&>::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay<               a    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile a    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          a    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile a    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               a  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile a  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          a  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile a  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               a  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay<      volatile a  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay<const          a  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay<const volatile a  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay<               a*   >::type,                a*>);
    static_assert(std::is_same_v<comd::decay<      volatile a*   >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay<const          a*   >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay<const volatile a*   >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay<               a* & >::type,                a*>);
    static_assert(std::is_same_v<comd::decay<      volatile a* & >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay<const          a* & >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay<const volatile a* & >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay<               a* &&>::type,                a*>);
    static_assert(std::is_same_v<comd::decay<      volatile a* &&>::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay<const          a* &&>::type, const          a*>);
    static_assert(std::is_same_v<comd::decay<const volatile a* &&>::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay<               f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<               f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<               f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<               f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<               f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay<               f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<      volatile f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const          f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay<const volatile f* &&>::type,                f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_c )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_c<               t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<const          t    >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t    >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<               t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<const          t  & >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t  & >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<               t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_c<const          t  &&>::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t  &&>::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c<               t*   >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t*   >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          t*   >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t*   >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               t* & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t* & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          t* & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t* & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               t* &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile t* &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          t* &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile t* &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u*   >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u*   >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u*   >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u*   >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u* & >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u* & >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u* & >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u* & >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<               u* &&>::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile u* &&>::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          u* &&>::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile u* &&>::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a*   >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a*   >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a*   >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a*   >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a* & >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a* & >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a* & >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a* & >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<               a* &&>::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile a* &&>::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          a* &&>::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile a* &&>::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f    >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f    >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f  & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f  & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f  &&>::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f  &&>::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f*   >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f*   >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f* & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f* & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<               f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<      volatile f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const          f* &&>::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c<const volatile f* &&>::type, const          f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_v )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_v<               t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t    >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<const          t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t    >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<               t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t  & >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<const          t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t  & >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<               t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t  &&>::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<const          t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t  &&>::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v<               t*   >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t*   >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          t*   >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t*   >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               t* & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t* & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          t* & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t* & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               t* &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile t* &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          t* &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile t* &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u*   >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u*   >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u*   >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u*   >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u* & >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u* & >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u* & >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u* & >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<               u* &&>::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile u* &&>::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          u* &&>::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile u* &&>::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a*   >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a*   >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a*   >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a*   >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a* & >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a* & >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a* & >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a* & >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<               a* &&>::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile a* &&>::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          a* &&>::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile a* &&>::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f    >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f    >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f  & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f  & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f  &&>::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f  &&>::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f*   >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f*   >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f* & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f* & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<               f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<      volatile f* &&>::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const          f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v<const volatile f* &&>::type,       volatile f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_r )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_r<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_r<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_r<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_r<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const          f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<      volatile f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const          f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r<const volatile f* &&>::type,                f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_lr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_lr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               t* &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile t* &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          t* &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile t* &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               u* &&>::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile u* &&>::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          u* &&>::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile u* &&>::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               a* &&>::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile a* &&>::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          a* &&>::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile a* &&>::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr<               f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<      volatile f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const          f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr<const volatile f* &&>::type,                f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_rr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_rr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<               t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               t* & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t* & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t* & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t* & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               u* & >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u* & >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u* & >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u* & >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               a* & >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a* & >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a* & >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a* & >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<      volatile f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const          f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr<const volatile f* &&>::type,                f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cv )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cv<               t    >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t    >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t    >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t    >::type, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<               t  & >::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t  & >::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t  & >::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t  & >::type, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<               t  &&>::type,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t  &&>::type,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t  &&>::type, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t  &&>::type, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv<               t*   >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t*   >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t*   >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t*   >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               t* & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t* & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t* & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t* & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               t* &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile t* &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          t* &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile t* &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u*   >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u*   >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u*   >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u*   >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u* & >::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u* & >::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u* & >::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u* & >::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               u* &&>::type,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile u* &&>::type,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          u* &&>::type, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile u* &&>::type, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a    >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a    >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a    >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a    >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a  & >::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a  & >::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a  & >::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a  & >::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a  &&>::type,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a  &&>::type,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a  &&>::type, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a  &&>::type, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a*   >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a*   >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a*   >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a*   >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a* & >::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a* & >::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a* & >::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a* & >::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               a* &&>::type,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile a* &&>::type,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          a* &&>::type, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile a* &&>::type, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f    >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f    >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f    >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f    >::type, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f  & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f  & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f  & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f  & >::type, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f  &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f  &&>::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f  &&>::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f  &&>::type, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f*   >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f*   >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f*   >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f*   >::type, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f* & >::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f* & >::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f* & >::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f* & >::type, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<               f* &&>::type,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<      volatile f* &&>::type,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const          f* &&>::type, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv<const volatile f* &&>::type, const volatile f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_cr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<      volatile f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const          f* &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr<const volatile f* &&>::type, const          f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_clr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_clr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t  &&>::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t  &&>::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               t* &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile t* &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          t* &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile t* &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               u* &&>::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile u* &&>::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          u* &&>::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile u* &&>::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               a* &&>::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile a* &&>::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          a* &&>::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile a* &&>::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f  &&>::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f  &&>::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr<               f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<      volatile f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const          f* &&>::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr<const volatile f* &&>::type, const          f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_crr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_crr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<               t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t  & >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t  & >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               t* & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t* & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t* & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t* & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               u* & >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u* & >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u* & >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u* & >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               a* & >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a* & >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a* & >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a* & >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f  & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f  & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f* & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f* & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<      volatile f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const          f* &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr<const volatile f* &&>::type, const          f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_vr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<      volatile f* &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const          f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr<const volatile f* &&>::type,       volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_vlr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vlr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t  &&>::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t  &&>::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               t* &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile t* &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          t* &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile t* &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               u* &&>::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile u* &&>::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          u* &&>::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile u* &&>::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               a* &&>::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile a* &&>::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          a* &&>::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile a* &&>::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f  &&>::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f  &&>::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr<               f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<      volatile f* &&>::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const          f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr<const volatile f* &&>::type,       volatile f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_vrr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vrr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t  & >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t  & >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               t* & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t* & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t* & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t* & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u* & >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u* & >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u* & >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u* & >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a* & >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a* & >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a* & >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a* & >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f  & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f  & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f* & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f* & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<      volatile f* &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const          f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr<const volatile f* &&>::type,       volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cvr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t    >::type, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t  & >::type, const volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t  &&>::type, const volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f    >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f  & >::type, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f  &&>::type, const volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f*   >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f* & >::type, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<      volatile f* &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const          f* &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr<const volatile f* &&>::type, const volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cvlr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvlr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t    >::type, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               t  & >::type,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t  & >::type,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t  & >::type, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t  & >::type, const volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               t  &&>::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t  &&>::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t  &&>::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t  &&>::type, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               t* & >::type,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t* & >::type,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t* & >::type, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t* & >::type, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               t* &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile t* &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          t* &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile t* &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u* & >::type,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u* & >::type,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u* & >::type, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u* & >::type, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               u* &&>::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile u* &&>::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          u* &&>::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile u* &&>::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a* & >::type,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a* & >::type,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a* & >::type, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a* & >::type, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               a* &&>::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile a* &&>::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          a* &&>::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile a* &&>::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f    >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f  & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f  & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f  & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f  & >::type, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f  &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f  &&>::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f  &&>::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f  &&>::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f*   >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f* & >::type,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f* & >::type,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f* & >::type, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f* & >::type, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<               f* &&>::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<      volatile f* &&>::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const          f* &&>::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr<const volatile f* &&>::type, const volatile f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_cvrr )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvrr<               t    >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t    >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t    >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t    >::type, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               t  & >::type,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t  & >::type,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t  & >::type, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t  & >::type, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               t  &&>::type,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t  &&>::type,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t  &&>::type, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t  &&>::type, const volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               t*   >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t*   >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t*   >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t*   >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               t* & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t* & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t* & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t* & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               t* &&>::type,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile t* &&>::type,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          t* &&>::type, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile t* &&>::type, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u*   >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u*   >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u*   >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u*   >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u* & >::type,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u* & >::type,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u* & >::type, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u* & >::type, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               u* &&>::type,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile u* &&>::type,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          u* &&>::type, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile u* &&>::type, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a    >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a    >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a    >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a    >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a  & >::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a  & >::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a  & >::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a  & >::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a  &&>::type,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a  &&>::type,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a  &&>::type, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a  &&>::type, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a*   >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a*   >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a*   >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a*   >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a* & >::type,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a* & >::type,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a* & >::type, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a* & >::type, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               a* &&>::type,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile a* &&>::type,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          a* &&>::type, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile a* &&>::type, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f    >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f    >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f    >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f    >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f  & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f  & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f  & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f  & >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f  &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f  &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f  &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f  &&>::type, const volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f*   >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f*   >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f*   >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f*   >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f* & >::type,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f* & >::type,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f* & >::type, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f* & >::type, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr<               f* &&>::type,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<      volatile f* &&>::type,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const          f* &&>::type, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr<const volatile f* &&>::type, const volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_t<               t    >,                t >);
    static_assert(std::is_same_v<comd::decay_t<      volatile t    >,                t >);
    static_assert(std::is_same_v<comd::decay_t<const          t    >,                t >);
    static_assert(std::is_same_v<comd::decay_t<const volatile t    >,                t >);
    static_assert(std::is_same_v<comd::decay_t<               t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_t<      volatile t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_t<const          t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_t<const volatile t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_t<               t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_t<      volatile t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_t<const          t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_t<const volatile t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_t<               t*   >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile t*   >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          t*   >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile t*   >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               t* & >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile t* & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          t* & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile t* & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               t* &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile t* &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          t* &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile t* &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               u    >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          u    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               u  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          u  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               u  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          u  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               u*   >,                u*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u*   >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<const          u*   >, const          u*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u*   >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<               u* & >,                u*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u* & >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<const          u* & >, const          u*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u* & >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<               u* &&>,                u*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile u* &&>,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<const          u* &&>, const          u*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile u* &&>, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_t<               a    >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          a    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               a  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          a  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               a  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<const          a  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_t<               a*   >,                a*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a*   >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<const          a*   >, const          a*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a*   >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<               a* & >,                a*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a* & >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<const          a* & >, const          a*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a* & >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<               a* &&>,                a*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile a* &&>,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<const          a* &&>, const          a*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile a* &&>, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_t<               f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<               f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<               f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<               f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<               f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_t<               f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<      volatile f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const          f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_t<const volatile f* &&>,                f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_c_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_c_t<               t    >,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t    >,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t    >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t    >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<               t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t  & >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t  & >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<               t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t  &&>, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t  &&>, const          t >);
    static_assert(std::is_same_v<comd::decay_without_c_t<               t*   >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t*   >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t*   >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t*   >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               t* & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t* & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t* & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t* & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               t* &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile t* &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          t* &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile t* &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u*   >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u*   >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u*   >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u*   >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u* & >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u* & >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u* & >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u* & >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               u* &&>,                u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile u* &&>,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          u* &&>, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile u* &&>, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a*   >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a*   >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a*   >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a*   >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a* & >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a* & >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a* & >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a* & >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               a* &&>,                a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile a* &&>,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          a* &&>, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile a* &&>, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f    >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f    >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f  & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f  & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f  &&>, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f  &&>, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f*   >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f*   >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f* & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f* & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<               f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<      volatile f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const          f* &&>, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_c_t<const volatile f* &&>, const          f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_v_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_v_t<               t    >,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t    >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t    >,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t    >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<               t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t  & >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t  & >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<               t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t  &&>,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t  &&>,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_v_t<               t*   >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t*   >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t*   >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t*   >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               t* & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t* & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t* & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t* & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               t* &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile t* &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          t* &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile t* &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u*   >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u*   >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u*   >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u*   >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u* & >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u* & >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u* & >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u* & >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               u* &&>,                u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile u* &&>,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          u* &&>, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile u* &&>, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a*   >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a*   >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a*   >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a*   >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a* & >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a* & >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a* & >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a* & >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               a* &&>,                a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile a* &&>,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          a* &&>, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile a* &&>, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f    >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f    >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f  & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f  & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f  &&>,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f  &&>,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f*   >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f*   >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f* & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f* & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<               f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<      volatile f* &&>,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const          f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_v_t<const volatile f* &&>,       volatile f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_r_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_r_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_r_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<      volatile f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const          f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_r_t<const volatile f* &&>,                f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_lr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_lr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               t* &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile t* &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          t* &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile t* &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               u* &&>,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile u* &&>,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          u* &&>, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile u* &&>, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               a* &&>,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile a* &&>,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          a* &&>, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile a* &&>, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<               f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<      volatile f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const          f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_lr_t<const volatile f* &&>,                f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_rr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_rr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               t* & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t* & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t* & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t* & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u* & >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u* & >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u* & >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u* & >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a* & >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a* & >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a* & >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a* & >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_rr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<      volatile f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const          f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_rr_t<const volatile f* &&>,                f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cv_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cv_t<               t    >,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t    >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t    >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t    >, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               t  & >,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t  & >,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t  & >, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t  & >, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               t  &&>,                t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t  &&>,       volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t  &&>, const          t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t  &&>, const volatile t >);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               t*   >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t*   >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t*   >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t*   >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               t* & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t* & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t* & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t* & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               t* &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile t* &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          t* &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile t* &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u*   >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u*   >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u*   >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u*   >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u* & >,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u* & >,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u* & >, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u* & >, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               u* &&>,                u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile u* &&>,       volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          u* &&>, const          u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile u* &&>, const volatile u*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a    >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a    >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a    >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a    >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a  & >,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a  & >,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a  & >, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a  & >, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a  &&>,                t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a  &&>,       volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a  &&>, const          t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a  &&>, const volatile t*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a*   >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a*   >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a*   >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a*   >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a* & >,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a* & >,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a* & >, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a* & >, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               a* &&>,                a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile a* &&>,       volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          a* &&>, const          a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile a* &&>, const volatile a*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f    >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f    >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f    >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f    >, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f  & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f  & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f  & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f  & >, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f  &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f  &&>,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f  &&>, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f  &&>, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f*   >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f*   >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f*   >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f*   >, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f* & >,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f* & >,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f* & >, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f* & >, const volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<               f* &&>,                f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<      volatile f* &&>,       volatile f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const          f* &&>, const          f*>);
    static_assert(std::is_same_v<comd::decay_without_cv_t<const volatile f* &&>, const volatile f*>);
}

BOOST_AUTO_TEST_CASE( decay_without_cr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<      volatile f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const          f* &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cr_t<const volatile f* &&>, const          f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_clr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_clr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t  &&>, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t  &&>, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               t* &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile t* &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          t* &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile t* &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               u* &&>,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile u* &&>,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          u* &&>, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile u* &&>, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               a* &&>,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile a* &&>,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          a* &&>, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile a* &&>, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f  &&>, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f  &&>, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<               f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<      volatile f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const          f* &&>, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_clr_t<const volatile f* &&>, const          f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_crr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_crr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t  & >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t  & >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               t* & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t* & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t* & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t* & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u* & >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u* & >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u* & >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u* & >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a* & >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a* & >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a* & >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a* & >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f  & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f  & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f* & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f* & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_crr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<      volatile f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const          f* &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_crr_t<const volatile f* &&>, const          f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_vr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<      volatile f* &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const          f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vr_t<const volatile f* &&>,       volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_vlr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t  &&>,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t  &&>,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               t* &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile t* &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          t* &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile t* &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               u* &&>,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile u* &&>,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          u* &&>, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile u* &&>, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               a* &&>,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile a* &&>,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          a* &&>, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile a* &&>, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f  &&>,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f  &&>,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<               f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<      volatile f* &&>,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const          f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vlr_t<const volatile f* &&>,       volatile f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_vrr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t  & >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t  & >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t* & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t* & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t* & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t* & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u* & >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u* & >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u* & >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u* & >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a* & >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a* & >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a* & >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a* & >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f  & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f  & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f* & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f* & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<      volatile f* &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const          f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_vrr_t<const volatile f* &&>,       volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cvr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t    >, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t  & >, const volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t  &&>, const volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f    >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f  & >, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f  &&>, const volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f*   >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f* & >, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<      volatile f* &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const          f* &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvr_t<const volatile f* &&>, const volatile f* &&>);
}

BOOST_AUTO_TEST_CASE( decay_without_cvlr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t    >, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t  & >,                t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t  & >,       volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t  & >, const          t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t  & >, const volatile t  & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t  &&>,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t  &&>,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t  &&>, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t  &&>, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t* & >,                t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t* & >,       volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t* & >, const          t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t* & >, const volatile t* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               t* &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile t* &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          t* &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile t* &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u* & >,                u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u* & >,       volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u* & >, const          u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u* & >, const volatile u* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               u* &&>,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile u* &&>,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          u* &&>, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile u* &&>, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a* & >,                a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a* & >,       volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a* & >, const          a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a* & >, const volatile a* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               a* &&>,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile a* &&>,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          a* &&>, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile a* &&>, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f    >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f  & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f  & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f  & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f  & >, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f  &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f  &&>,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f  &&>, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f  &&>, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f*   >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f* & >,                f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f* & >,       volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f* & >, const          f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f* & >, const volatile f* & >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<               f* &&>,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<      volatile f* &&>,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const          f* &&>, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvlr_t<const volatile f* &&>, const volatile f*   >);
}

BOOST_AUTO_TEST_CASE( decay_without_cvrr_t )
{
    namespace comd = commander::detail;

    using t = int;
    using u = int[];
    using a = int[3];
    using f = int();

    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t    >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t    >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t    >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t    >, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t  & >,                t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t  & >,       volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t  & >, const          t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t  & >, const volatile t    >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t  &&>,                t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t  &&>,       volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t  &&>, const          t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t  &&>, const volatile t  &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t*   >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t*   >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t*   >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t*   >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t* & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t* & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t* & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t* & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               t* &&>,                t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile t* &&>,       volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          t* &&>, const          t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile t* &&>, const volatile t* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u*   >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u*   >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u*   >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u*   >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u* & >,                u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u* & >,       volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u* & >, const          u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u* & >, const volatile u*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               u* &&>,                u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile u* &&>,       volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          u* &&>, const          u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile u* &&>, const volatile u* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a    >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a    >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a    >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a    >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a  & >,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a  & >,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a  & >, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a  & >, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a  &&>,                t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a  &&>,       volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a  &&>, const          t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a  &&>, const volatile t*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a*   >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a*   >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a*   >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a*   >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a* & >,                a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a* & >,       volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a* & >, const          a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a* & >, const volatile a*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               a* &&>,                a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile a* &&>,       volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          a* &&>, const          a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile a* &&>, const volatile a* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f    >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f    >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f    >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f    >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f  & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f  & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f  & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f  & >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f  &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f  &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f  &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f  &&>, const volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f*   >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f*   >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f*   >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f*   >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f* & >,                f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f* & >,       volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f* & >, const          f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f* & >, const volatile f*   >);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<               f* &&>,                f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<      volatile f* &&>,       volatile f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const          f* &&>, const          f* &&>);
    static_assert(std::is_same_v<comd::decay_without_cvrr_t<const volatile f* &&>, const volatile f* &&>);
}
